Exam 2 discussion.

High: 99/100 
Average: 77/100 (before adding 0s for students who didn't take it)

A (90-100): 23 students
B (80-89): 19 students
C (70-79): 12 students
D (60-69): 14 students
F (below 60): 12 students (includes several 0s who didn't take it)

Briefly discuss exam.

Exam grades in Canvas
- drops lowest among Exam 1, Exam 2, Exam 3,
    *midterm equivalent from final*

- what does this mean with the final exam?

////////////////////////////////////////////////////

HW 7 will be posted after class, due Tues Oct 28

////////////////////////////////////////////////////

Today:

- exists elimination rule
- proving DeMorgan's laws for quantifiers
- soundness and completeness in predicate logic
- begin mathematical induction, if time

/////////////////////////////////

Exists elimination - ExistsE[T]

Idea: we know a statement is true for *some* individual
Create an alias for that anonymous individual

If we can reach a conclusion that does NOT use that alias
    ...we know that conclusion is valid, since
    there WAS such an individual


Rule summary:

                                 Let ((a: T) => SubProof(
                                    Assume( P(a) ),
            ∃((x: T) => P(x))       ...
                                    Q
                                 )),
ExistsE[T]: ----------------------------------------------------
                     Q

"a" is our alias for the x where P(x) held
"a" needs to be a "fresh" name (unused before)
Q CANNOT include anything about "a"



Syntax:

1 ( ∃((x: T) => P(x)) )         by Justification,
2 Let ((a: T) => SubProof(
    3 Assume ( P(a) ),
    ...
    4 ( Q )                     by Justification
)),
5 ( Q )                         by ExistsE[T](1, 2)



--> Think of ExistsE like OrE
    ∃ x P(x) means: P(n1) V P(n2) V ... V P(nk)


Use ExistsE in the SAME situations you would use OrE


//////////////////////////////

Examples:

(exists1.sc)
∀ x (Human(x) → Mortal(x)), ∃ x (Human(x)) ⊢ ∃ x (Mortal(x))



///

(exists2.sc)
∀ x (P(x) → ¬Q(x)) ⊢ ¬(∃ x (P(x) ^ Q(x)))

x is students

    P(x): student x attends K-State
    Q(x): student x attends KU

    --> what is this argument saying?

∀ x (P(x) → ¬Q(x)): All students who attend K-State don't attend KU

¬(∃ x (P(x) ^ Q(x))): There does not exist a student who
                        attends both K-State and KU


////////////////////////////

(in-class quiz)

////////////////////////////

Proof tactics for predicate logic

- see if you can do anything right away with the premises
    Which rules? 

    AndE1, AndE2
    (maaaaaybe OrI1 or OrI2, but usually not helpful)
    AndI (maybe, only if helpful)
    ImplyE (if we have the left side of an implies already)
    AllE if I have an All statement and an individual
    ExistsI if I have a statement about an individual (if helpful)

- look at top-level operator for what you are trying to prove
    trying to prove a "for all" statement with ∀?

    use AllI

    trying to prove a "there exists" statement with ∃?

        do I have that statement about a particular individual?
            use ExistsI

        could I use AllE for an individual with an all statement?


        do I have a "there exists" statement as a claim?
            use ExistsE 

        do I have an OR statement as a claim?
            try OrE

        really can't find anything? 
            try PbC


    trying to prove -> 


    trying to prove ¬(something)



    trying to prove an OR
        can you get one side? 

        do you have an OR statement already? 

        do you have an "exists" statement? 


    trying to prove an AND
        first approach?

        no luck? 


    -->when you are in a subproof?


    Unsure what to do?

////////////////////////////////////////

<-- stopped here, will continue Thursday

////////////////////////////////////////

Proving DeMorgan's laws 

//demorgan1.sc
∀ x ¬P(x)       equivalent to       ¬(∃ x P(x))

/////////////////////////////////////

//demorgan2.sc
∃ x ¬P(x)       equivalent to       ¬(∀ x P(x))

////////////////////////////////////////

Soundness and completeness of predicate logic.


Soundness: definition?

    propositional:

    predicate logic:




Completeness: definition?

    propositional:

    predicate logic:



///////////////////////////////////

Same argument might be VALID in one domain and INVALID in another

- deduction can only prove arguments that are valid in ANY domain
- we can't prove all valid arguments


Domain with integers with operations like +


All integers? 2 + 3 = ?


Subset (0,1,2,3,4) of integers. 2 + 3 = ?



////////////////////////////////////


Godel's Incompleteness Theorem.

Any consistent formal system where integer arithmetic is
carried out is incomplete -- there will be true statements
that cannot be proved.

(depends on domains/interpretations)

/////////////////////

Next time:
- mathematical induction
--> what have you done before?
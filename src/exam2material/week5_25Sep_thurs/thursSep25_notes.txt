HW 4 due Tues Sep 30

Reminder: link format, not modifying premises/conclusion

(repo)/tree/hex digital fingerprint

////////////////////////////

Today:

- negation rules
- natural deduction proof strategies

////////////////////////////////

Reminder: NegE


        P    ¬P
NegE: ----------
          F


Syntax:

a ( p  ) by Justification,
b ( ¬p ) by Justification,
c ( F  ) by NegE(a, b)


//////////////////////////////////

Reminder: NegI

        SubProof(
            Assume( P ),
          ... F
        )
NegI: ------------------
              ¬P


Syntax:

a SubProof(
    b Assume( p ),
    ...
    c ( F ) by Justification
),
d ( ¬p ) by NegI(a)

//////////////////////////

Practice rules so far: 

not1.sc, not2.sc, not3.sc

////////////////////////////////

Bottom-elimination:

               F
BottomE:  ----------
               Q


//how does this make logical sense?

(think about what we are proving with an argument --
    IF all the premises are true,
    THEN we promise the conclusion is true)




Proof by contradiction (reductio ad absurdum):

        SubProof(
            Assume(¬P),
            ...
            F
        )
PbC:  -------------------
          P


--> Difference between NegI and PbC?

///////////////////////////////////

First example.

I go for a walk or I get coffee
I don't go for a walk.

Conclusion? I get coffee



( p ∨ q, ¬p ) ⊢ ( q )
Proof(
    1 ( p ∨ q )     by Premise,
    2 ( ¬p )        by Premise,

    3 SubProof(
        4 Assume ( p ),
        5 ( F ) by NegE(4, 2)
        6 ( q ) by BottomE(5)
        //goal: q
    ),
    7 SubProof(
        8 Assume ( q )
    ),
    9 ( q ) by OrE(1, 3, 7)

    //do same thing with q, try to get q
)


//////////////////////////////////

( ¬¬p ) ⊢ ( p )
Proof(
    1 ( ¬¬p )   by Premise,

    //as a last resort, use PbC to get p 
    2 SubProof(
        3 Assume ( ¬p ),
        4 ( F ) by NegE(3, 1)
        //goal: F
    ),
    5 ( p ) by PbC(2)
    //use PbC
)




///////////////////////////////////


( ¬q → ¬p ) ⊢ ( p → q )         //not4.sc


//////////////////////////////////

(in-class quiz)


//////////////////////////////////


( ¬(¬p ∨ ¬q) ) ⊢ ( p ∧ q )     //not5.sc




//////////////////

HW 4.

#1: p ∨ q, p → a ∨ b, q → a ∨ b, a → c, b → c ⊢ c
    first step? use OrE on p ∨ q
        subproof assume p
            get a ∨ b
            nest another OrE with a ∨ b to get c

#2: (p → q) ∨ (p → r) ⊢ p → q ∨ r
    first step?
    use ImplyI subproof
        assume P
        try OrE subproof on premise, get to  q ∨ r in both cases
        goal: q ∨ r

#3: p ∧ q → r ⊢ p → (q → r)
    first step? use ImplyI
        assume p 
        nest ImplyI to get our goal

        goal: q → r


#4: ¬(p ∨ q) ⊢ ¬p ∧ ¬q
    first step? think of the conclusion as two separate proofs
    first prove ¬p, then prove ¬q


#5: p → a ∨ b, a → d, q → ¬b, p ∧ q ⊢ d
    first step?

(this one will use BottomE)


(we'll quickly discuss #6/#7 next Tuesday)

/////////////////////////////////

<-- stopped here, will continue on Tuesday
/////////////////////////////////

Next time:
- putting everything together
- proving theorems with deduction
- soundness and completeness
- proving equivalence
- begin sets
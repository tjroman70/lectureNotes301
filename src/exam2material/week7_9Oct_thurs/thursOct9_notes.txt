HW 6 due Tues October 14

Exam 2 is Thurs October 16
--> more info posted soon
--> will review on Tues October 14

////////////////////

HW 5 comments:


4. {x : x ∈ ℤ, x ≥ -5} ∪ {x : x ∈ ℤ, x ≤ 7}

all integers 
ℤ

ℤ



5. Suppose A ⋃ B = A for two sets A and B.
What does that tell us about A and B?

    Common mistake:
        B is the empty set
        B = A
    
    Answer: B is a subset of A 



6. Suppose A ⋂ B = A for two sets A and B.
What does that tell us about A and B?

    Common mistake:
        A = B 
    
    Answer: A is a subset of B



7 (a). If A ⋃ C = B ⋃ C, must A = B?

Bad counterexample:
    A = {4}
    B = {2}
    C = {1,2,3}

A ⋃ C = {1,2,3,4}
B ⋃ C = {1,2,3}

Good counterexample:
    A = {4}
    B = {}
    C = {4}

A ⋃ C = {4}
B ⋃ C = {4}

The unions are the same but A does not equal B (we broke our promise).


7 (b). If A ⋂ C = B ⋂ C, must A = B?

Want counterexample, need A ⋂ C = B ⋂ C to be true
but A not equal to B.

A = {1}
B = {2}
C = {3}

Here, the intersections are both the empty set but A doesn't equal B.


Predicates, #5:

¬(∀ x (InKS(x) → ¬Campus(x)))

translation:
    Not all students who are KS residents don't live on campus

counterexample: 
    true. Just need ONE student to demonstrate that the promise 
        wasn't always true

        find a student who is KS resident but lives on campus
        Ava.



////////////////////

Today: 
- Arguments in predicate logic
- Begin natural deduction rules in predicate logic

//////////////////////


Arguments in predicate logic

Set of premises
Conclusion

Argument is VALID in general: regardless of domain,
    whenever all the premises are true,
    then the conclusion is also true

Argument is INVALID in general: we can find a domain where
    all the premises are true but the conclusion is false



Examples -- are the following arguments valid?

///

Premises: ∀ x (P(x) → Q(x)), ∃ x P(x)
Conclusion: ∃ x Q(x)

Valid or not? yes. Whoever my P is is, that individual will also be Q


///

Premises: ∀ x P(x) : everyone in my domain is P-ish
Conclusion: ∃ x P(x): there is someone in domain who is P-ish

Valid or not? invalid. Not true for an empty domain. 

/////////////////////////////////

soundness ?
    all arguments proved with deduction were actually true 

completeness ?
    all true arguments can be proved with deduction 

predicate logic will be incomplete

/////////////////////////////////

Proofs in predicate logic.

- want to formalize the kind of reasoning from above

- want valid inference rules that do NOT depend on the domain
    (there is no way to do the equivalent of a
    "truth table proof" in predicate logic...
        there are infinitely many domains!)

- add inference rules on quantifiers to our deduction rules


////////////////////////////////

Writing predicate logic statements in Logika

In Logika, ∀ x P(x) is written as:

    ∀ ((x: T) => P(x))




In Logika, ∃ x P(x) is written as:

    ∃ ((x: T) => P(x))



--> what is "T"? my domain 


Settings->Command Palette->Tasks (run task)->Sireum slang template->
    Insert a for-all quantification

This will insert the statement:

∀((ID: TYPE) => CLAIM)



(similarly, insert a there exists statement)


You can also edit the keyboard shortcuts for these templates

////////////////////////////////

When you have homework or we do examples, the proof files
will look like this:

// #Sireum #Logika

import org.sireum._
import org.sireum.justification._
import org.sireum.justification.natded.prop._
import org.sireum.justification.natded.pred._

@pure def ProofName[T](pred1: T => B @pure, pred2: T => B @pure,
                ..., indiv1: T, indiv2: T, ...): Unit = {
    Deduce(
        (comma-separated list of premises)
            ⊢
        (conclusion)

        Proof(
            //the actual proof steps go here
        )
    )
}

///////////////////////////////

For-all elimination (AllE):

           ∀ ((x: T) => P(x))
AllE[T]:  ---------------------
                   P(v)

//where v is a particular individual in the domain
//(i.e, v has type T)


Idea:

- if we know that a statement is true for ALL individuals in
our domain


...then what would we know about a specific individual
in that domain?

///////////////////////////////

Syntax:

(
    ∀ ((x: T) => Human(x))
)
⊢
( Human(Socrates) )

Proof(
    1 ( ∀ ((x: T) => Human(x)) )    by Premise,
    2 ( Human(Socrates) )           by AllE[T](1)
)

Note: This assumes "Socrates" and "Human" were both parameters
to our proof function:


@pure def Example[T](Human: T => B @pure, Socrates: T)



///////////////////////////////

Example (all1.sc)


∀ x (inCIS301(x) → takenCIS200(x)), inCIS301(bob) ⊢ takenCIS200(bob)


//////////////////////////////

Next rule will be for all introduction.

First: consider these two statements:


∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


are they equivalent?
    ∀ x (P(x) ⋀ Q(x))  - translation?
        Everyone is both is both P and Q



    (∀ x P(x)) ⋀ (∀ x Q(x)) - translation?
        Everyone is P and everyone is Q




how would we defend our position? 
    two proofs 



//////////////////////////////////

For-all introduction (AllI).

Idea:

- Suppose we show statement holds for some arbitrary individual
    in our domain
- That individual could have been anyone!

...what can we say about that statement for all individuals in
    our domain?



///

Rule definition:

            Let ( (a: T) => SubProof(
                ...
                P(a)
            )),
AllI[T] : -------------------------------
                 ∀ ((x: T) => P(x))


//"a" is an unused, "fresh" individual



Rule syntax:

4 Let ( (a: T) => SubProof(
    ...
    P(a)
)),
10 ( ∀ ((x: T) => P(x)) ) by AllI[T](4)


//a could be any (fresh) individual name


///////////////////////////////////

Example:

Prove these statements are equivalent:

∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


all2.sc

///////////////////////////////////

in-class quiz

///////////////////////////////////

Are these statements equivalent?

∀ x (P(x) ⋁ Q(x))           (∀ x P(x)) ⋁ (∀ x Q(x))


//////////////////////////////////////////

<--- stopped here, will continue on Tuesday

////////////////////////////////////////

Idea behind exists-introduction (ExistsI):

If we find ONE individual in a domain where a statement holds

...then THERE EXISTS an individual in the domain where the
    statement holds



///

Rule definition:

                  P(v)
ExistsI[T]: ---------------------
              ∃ ((x: T) => P(x) )

//v is some individual of type T


//////////////////////////////////////////

Rule syntax:


( Human(Socrates) ) ⊢ ( ∃ ((x: T) => Human(x) ))
Proof(
    1 ( Human(Socrates) ) by Premise,
    2 ( ∃ ((x: T) => Human(x)) )  by ExistsI[T](1)
)

(assume "Socrates" was a parameter of type T)

/////////////////////////////////////////

Bigger example (exists1.sc):

(
    ∀ ((x: T) => (Human(x) → Mortal(x))),
    Human(Socrates)
)
⊢ ( ∃ ((x: T) => Mortal(x) ))


/////////////////////////////

Suppose you are trying to prove this conclusion:

∀ ((x: T) => P(x) ⋀ Q(x) → ¬R(x) )

How to construct?




////////////////////////////

Putting things together - bothQuant.sc

///////////////////////////

Next time:
- more natural deduction with predicate logic
- review for exam 2
Homework 1 due tonight
    look at last two problems


I'll post Homework 2 after class (due Tues Sep 9)

/////////////////////

Today:

- review implies operator
- evaluating logical statements
- compound truth tables
- using Logika
- parse trees
- begin propositional logic

//////////////////////////////////////////

Logical operators:

∧ - AND
∨ - OR
¬ - NOT
→ - IMPLIES

////////////////////////////////////////

Review: IMPLIES operator →

"If it is snowing, then I will bring a coat"

p: It is snowing
q: I will bring a coat

p → q

When is this true? When is this false?


p q  #  p → q
--------------
T T  #    T 
T F  #    F
F T  #    T
F F  #    T

//////////////////////////////////////

Consider ¬p ∨ q ∧ r.

--> what operation do we do first?



Order of operations

In math? 

()
exponents
*, / (left to right)
+, - (left to right)



For logic statements (∧ ∨ ¬ →)?

()
¬ (negation)
∧ (AND)
∨ (OR)
→ (IMPLIES)




Given this statement:

    ¬p ∨ q ∧ r




Add () to show the order of operations.

 ((¬p) ∨ (q ∧ r))





Evaluate the above statement using these
variable assignments:

p is T
q is F
r is F


((¬T) ∨ (F ∧ F))
((F) ∨ (F))
F

output is false

////////////////////////////////////////////////

Order of operations
    ¬ evaluates right to left
        ¬¬p is equivalent to....(¬(¬p))


    ∧ and ∨ evaluate left to right
        p ∧ q ∧ r is equivalent to....(p ∧ q) ∧ r
        p ∨ q ∨ r is equivalent to....(p ∨ q) ∨ r


    → evaluates right to left
        p → q → r is equivalent to....p → (q → r)





//////////////////////////////////////////

Top-level operator (what happens LAST?)


(¬p) ∨ (q ∧ r)


top-level?  OR


How is this similar to a circuit? last gate

top-level operator output is the output of the entire statement



///////////////////////////////

p ∧ q ∨ r ∧ p

rewrite with ():

(p ∧ q) ∨ (r ∧ p)


top-level operator? ∨ (OR)



//////////////////////////////

p ∧ q ∧ r ∧ s

rewrite with ():


((p ∧ q) ∧ r) ∧ s


top-level operator?  ∧ (rightmost one, by s)


////////////////////////////////////////////////////

In-class practice quiz

////////////////////////////////////////////////////

Listing all truth assignments for a logical statement.



If we have 2 variables, how many possible truth assignments?

    p, q


4


If we have 3 variables, how many possible truth assignments?

    p, q, r

8



If we have n variables, how many possible truth assignments?

2^n




////////////////////////////////////////////////////

Classifying logical statements based on truth assignments.



Contingent, contradictory, tautology



contingent: at least one truth assignment evaluates to true
    and at least one truth assignment evaluates to false
    (a mix)

    Example? p ∨ q



contradictory: every truth assignment evaluates to false

    Example? ¬p ∧ p


tautology: every truth assignment evaluates to true


    Example?  ¬p ∨ p
    

///////////////////////////////////////////

∧ ∨ ¬ →

///////////////////////////////////////////

Compound truth tables.


Write a truth table for:

(p ∧ r) → (r ∨ ¬q)

                *
--------------------------
p q r # (p ∧ r) → (r ∨ ¬q)
--------------------------
T T T #    T    T    T F
T T F #    F    T    F F
T F T #    T    T    T T
T F F #    F    T    T T
F T T #    F    T    T F
F T F #    F    T    F F
F F T #    F    T    T T
F F F #    F    T    T T
--------------------------
Tautology






--> top-level operator?

--> need to evaluate statement on ALL possible 
truth assignments

--> how many truth assignments are there?

--> how would we classify this truth table?


/////////////////////////////////////////

complete truth table in truth.logika

--> what to type for different operators


AND: &
OR: |
NOT: !
IMPLIES: ->:

alignment matters!


(how to get fonts?)


--> order of operations in Logika

//////////////////////////////////////
Complete tautology.logika

//////////////////////////////////////

trees



parse trees

--> what are they?

--> draw one for (p ∧ q) → ¬r

(drew on board during class)


--> expression trees

(discussed, drew on board during class)


--> draw one for p ∨ q ∧ r → ¬p → ¬q ∨ s

(drew on board during class)


--> how do they relate to programming?

--> what is the "top-level operator" here?
    leftmost implies


////////////////////////////////////////

Propositional logic.


- a set of propositional atoms (statements that can be T/F)
    --> these will be our boolean variables in logic statements



- connected by logical operators



- join together to make new propositions (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions? (true or false)

propositional atom: as simple of a proposition as possible
    (doesn't contain operators)


Today is Thursday. yes 


What time is it? no


x == 2 yes


Pigs can fly. yes


Drive carefully. no


y <= 4 yes



////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.

    q: It is snowing.

    r: y <= 4

    s: x == 2


How would we express these as English sentences?

    ¬p: It is not below freezing


    p ∧ q: It is below freezing and it's snowing


    p → q : If it's below freezing then it's snowing


    ¬p → ¬q: If it's not below freezing then it's not snowing


    r ∨ s: (y <= 4 || x == 2)

    ¬r: y > 4

////////////////////////

Next time:

- A bit more with translations
- Equivalent propositions
- DeMorgan's laws
- Equivalent if-statements
- Negating if-statements
- Proving equivalence with truth tables
- Satisfiability